# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rerun/all/rerun.rbi
#
# rerun-0.14.0

module Rerun
end
class Rerun::Watcher
  def adapter; end
  def adapter_name; end
  def directory; end
  def ignore_dotfiles; end
  def ignoring; end
  def initialize(options = nil, &client_callback); end
  def join; end
  def pattern; end
  def pause; end
  def priority; end
  def running?; end
  def sanitize_dirs(dirs); end
  def start; end
  def stop; end
  def unpause; end
  def watching; end
end
class Rerun::Watcher::InvalidDirectoryError < RuntimeError
end
module Rerun::System
  def linux?; end
  def mac?; end
  def rails?; end
  def windows?; end
end
class Rerun::Options
  def self.parse(args: nil, config_file: nil); end
  extend Rerun::System
end
class Rerun::Notification
  def app_name; end
  def body; end
  def command; end
  def command_named(name); end
  def icon; end
  def icon_dir; end
  def initialize(title, body, options = nil); end
  def options; end
  def send(background = nil); end
  def title; end
  def with_clean_env; end
  include Rerun::System
end
class Rerun::Runner
  def app_name; end
  def change_message(changes); end
  def clear?; end
  def clear_screen; end
  def die; end
  def dir; end
  def exit?; end
  def force_polling; end
  def git_head_changed?; end
  def initialize(run_command, options = nil); end
  def join; end
  def key_pressed; end
  def notify(title, body, background = nil); end
  def one_char; end
  def pattern; end
  def quiet?; end
  def read_git_head; end
  def restart(with_signal = nil); end
  def restart_with_signal(restart_signal); end
  def run(command); end
  def running?; end
  def say(msg); end
  def self.keep_running(cmd, options); end
  def send_signal(signal); end
  def signal_and_wait(signal); end
  def start; end
  def start_keypress_thread; end
  def stop; end
  def stop_keypress_thread; end
  def stty(args); end
  def toggle_pause; end
  def unpause; end
  def verbose?; end
  def watcher; end
  include Rerun::System
  include Timeout
end
class Rerun::Glob
  def initialize(glob_string); end
  def smoosh(chars); end
  def to_regexp; end
  def to_regexp_string; end
end
